(define (max a b)
  (if (> a b) a b))
(define (maxInList a)
  (cond ((> (length a) 1) (max (car a) (maxInList(sublist a 1 (length a)))))
        ((= (length a) 1) (car a))
        (else 0)))
;; (define (qsort list)
;;   ())
;; (define (middle a b c)
;;   (cond ((or (and (> a b) (> b c)) (and (> c b) (> b a))) b)
;;         ((or (and (> a c) (> c b)) (and (> b c) (> c a))) c)
;;         ((or (and (> b a) (> a c)) (and (> c a) (> a b))) a)
;;         (else a)))
;; (define (exercise a b c)
;;   (+ (* (max3 a b c) (max3 a b c)) (* (middle a b c) (middle a b c))))
;; ;; (middle 1 3 6)
;; (define (exercise a b c)
;;   ((let ((max a) (mid b)))
;;    (set! max (if (> b a) (if (> c b) c b) (if (> c a) c a)))))
;; (exercise 1 2 3)
(define (abs x)
  (if (< x 0) (- x) x))
(define (square x) (* x x))
(define (good-enough? root x)
  (< (abs (- (square root) x)) 0.000000000001))
(define (improve-guess guess x)
  (/ (+ (/ x guess) guess) 2))
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve-guess guess x) x)))
(define (sqrt x)
  (begin
    (pp (local-decoded-time))
    (display (exact->inexact (sqrt-iter (/ x 2) x)))
    (pp (local-decoded-time))))

;; difference between #if and #new-if:
;; scheme is a applicative-order language except the #if statement, but #new-if will evaluate the result of every ;; paramter
(define (new-if condition then-clause else-clause)
  (cond (condition then-clause)
        (else else-clause)))
